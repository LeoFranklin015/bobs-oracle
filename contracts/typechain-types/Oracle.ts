/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Oracle {
  export type RequestStruct = {
    id: BigNumberish;
    url: string;
    path: string;
    value: string;
    caller: string;
    callback: BytesLike;
  };

  export type RequestStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    string
  ] & {
    id: BigNumber;
    url: string;
    path: string;
    value: string;
    caller: string;
    callback: string;
  };
}

export interface OracleInterface extends utils.Interface {
  contractName: "Oracle";
  functions: {
    "currentId()": FunctionFragment;
    "fullfillRequest(uint256,string)": FunctionFragment;
    "getCurrentId()": FunctionFragment;
    "getOracleCaller()": FunctionFragment;
    "getOracleOwner()": FunctionFragment;
    "getRequests(uint256)": FunctionFragment;
    "getRequestsCallback(uint256)": FunctionFragment;
    "getRequestsCaller(uint256)": FunctionFragment;
    "getRequestsValue(uint256)": FunctionFragment;
    "oracleCaller()": FunctionFragment;
    "oracleOwner()": FunctionFragment;
    "request(string,string,bytes4)": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "setCaller(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "currentId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fullfillRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestsCallback",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestsCaller",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestsValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "request",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setCaller", values: [string]): string;

  decodeFunctionResult(functionFragment: "currentId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullfillRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestsCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestsCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestsValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "request", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCaller", data: BytesLike): Result;

  events: {
    "Requested(uint256,string,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Requested"): EventFragment;
}

export type RequestedEvent = TypedEvent<
  [BigNumber, string, string, string],
  { id: BigNumber; url: string; path: string; caller: string }
>;

export type RequestedEventFilter = TypedEventFilter<RequestedEvent>;

export interface Oracle extends BaseContract {
  contractName: "Oracle";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    currentId(overrides?: CallOverrides): Promise<[BigNumber]>;

    fullfillRequest(
      id: BigNumberish,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOracleCaller(overrides?: CallOverrides): Promise<[string]>;

    getOracleOwner(overrides?: CallOverrides): Promise<[string]>;

    getRequests(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Oracle.RequestStructOutput]>;

    getRequestsCallback(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRequestsCaller(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRequestsValue(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    oracleCaller(overrides?: CallOverrides): Promise<[string]>;

    oracleOwner(overrides?: CallOverrides): Promise<[string]>;

    request(
      url: string,
      path: string,
      callbackFunction: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string, string] & {
        id: BigNumber;
        url: string;
        path: string;
        value: string;
        caller: string;
        callback: string;
      }
    >;

    setCaller(
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  currentId(overrides?: CallOverrides): Promise<BigNumber>;

  fullfillRequest(
    id: BigNumberish,
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentId(overrides?: CallOverrides): Promise<BigNumber>;

  getOracleCaller(overrides?: CallOverrides): Promise<string>;

  getOracleOwner(overrides?: CallOverrides): Promise<string>;

  getRequests(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Oracle.RequestStructOutput>;

  getRequestsCallback(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRequestsCaller(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRequestsValue(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  oracleCaller(overrides?: CallOverrides): Promise<string>;

  oracleOwner(overrides?: CallOverrides): Promise<string>;

  request(
    url: string,
    path: string,
    callbackFunction: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, string, string] & {
      id: BigNumber;
      url: string;
      path: string;
      value: string;
      caller: string;
      callback: string;
    }
  >;

  setCaller(
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    currentId(overrides?: CallOverrides): Promise<BigNumber>;

    fullfillRequest(
      id: BigNumberish,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentId(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleCaller(overrides?: CallOverrides): Promise<string>;

    getOracleOwner(overrides?: CallOverrides): Promise<string>;

    getRequests(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Oracle.RequestStructOutput>;

    getRequestsCallback(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRequestsCaller(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRequestsValue(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    oracleCaller(overrides?: CallOverrides): Promise<string>;

    oracleOwner(overrides?: CallOverrides): Promise<string>;

    request(
      url: string,
      path: string,
      callbackFunction: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string, string] & {
        id: BigNumber;
        url: string;
        path: string;
        value: string;
        caller: string;
        callback: string;
      }
    >;

    setCaller(caller: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Requested(uint256,string,string,address)"(
      id?: null,
      url?: null,
      path?: null,
      caller?: null
    ): RequestedEventFilter;
    Requested(
      id?: null,
      url?: null,
      path?: null,
      caller?: null
    ): RequestedEventFilter;
  };

  estimateGas: {
    currentId(overrides?: CallOverrides): Promise<BigNumber>;

    fullfillRequest(
      id: BigNumberish,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentId(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleCaller(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getRequests(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestsCallback(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestsCaller(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestsValue(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleCaller(overrides?: CallOverrides): Promise<BigNumber>;

    oracleOwner(overrides?: CallOverrides): Promise<BigNumber>;

    request(
      url: string,
      path: string,
      callbackFunction: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setCaller(
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currentId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fullfillRequest(
      id: BigNumberish,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracleCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracleOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequests(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestsCallback(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestsCaller(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestsValue(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    request(
      url: string,
      path: string,
      callbackFunction: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCaller(
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
